<?php

namespace $NAMESPACE_CONTROLLER$;

use App\Http\Controllers\Controller;
use $NAMESPACE_REQUEST$\$MODEL_NAME$Request;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Encore\Admin\Controllers\ModelForm;
use Encore\Admin\Facades\Admin;
use Encore\Admin\Form;
use Encore\Admin\Grid;
use Encore\Admin\Layout\Content;
use Flash;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\Route;
use Response;
$USE_NAMESPACE_MODEL_LIST$

class $MODEL_NAME$Controller extends Controller
{
    use ModelForm;

    /** @var  $MODEL_NAME$Repository */
    private $$MODEL_NAME_CAMEL$Repository;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @return Response
     */
    public function index()
    {
        return Admin::content(function (Content $content) {

            $content->header(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index_header'));
            $content->description(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index_description'));

            $content->body($this->grid());
        });
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        return Admin::content(function (Content $content) {

            $content->header(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create_header'));
            $content->description(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create_description'));

            $content->body($this->form());

        });
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param $MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store($MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $LARAVEL_ADMIN_STORE_UPLOAD_IMAGE$

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);
$LARAVEL_ADMIN_TAGGING_STORE$
$LARAVEL_ADMIN_MODEL_M2M_RELATIONS_STORE$
        Flash::success(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.saved_success'));

        return Input::get('_previous_') ? redirect(Input::get('_previous_')) : redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index'));

    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.not_found'));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index'));
        }

        return view('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);

    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
$LARAVEL_ADMIN_TAGGING_EDIT$

        return Admin::content(function (Content $content) use ($id) {

            $content->header(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit_header'));
            $content->description(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit_description'));

            $content->body($this->form()->edit($id));
        });
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param $MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($id, $IS_ROW_EDIT$Request $request)
    {
$BATCH_EDIT_CODE$
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.not_found'));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index'));
        }
        $input = $request->all();
$LARAVEL_ADMIN_UPDATE_UPLOAD_IMAGE$
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($input, $id);
$LARAVEL_ADMIN_TAGGING_UPDATE$
$LARAVEL_ADMIN_MODEL_M2M_RELATIONS_UPDATE$
        Flash::success(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.updated_success'));

        return Input::get('_previous_') ? redirect(Input::get('_previous_')) : redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        // 根据 `,` 判断传递过来的是单个id还是多个id
        if (substr_count($id, ',') >= 1) {
            $id = explode(",", $id);
        }

        // 如果是数组则进行批量删除
        if (is_array($id)) {
            if ($flag = $this->$MODEL_NAME_CAMEL$Repository->batchDelete('id', $id)) {
$LARAVEL_ADMIN_TAGGING_BATCH_DESTROY$
                return response()->json(['message' => __('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.deleted_success'), 'status' => $flag]);
            } else {
                return response()->json(['message' => __('base.deleted.error'), 'status' => $flag]);
            }
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error(__('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.not_found'));

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index'));
        }

        if ($flag = $this->$MODEL_NAME_CAMEL$Repository->delete($id)) {
$LARAVEL_ADMIN_TAGGING_DESTROY$
$LARAVEL_ADMIN_MODEL_M2M_RELATIONS_DESTORY$
            return response()->json(['message' => __('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.deleted_success'), 'status' => $flag]);
        } else {
            return response()->json(['message' => __('base.deleted.error'), 'status' => $flag]);
        }
    }

    /**
     * [form description]
     * @return {[type]} [description]
     */
    protected function form()
    {
        return Admin::form($MODEL_NAME$::class, function (Form $form) {

            $form->display('id', 'ID');
$LARAVELADMIN_FIELD_LIST$
$LARAVEL_ADMIN_TAGGING_FORM$
            $form->display('created_at', __('base.created_at'));
            $form->display('updated_at', __('base.updated_at'));

        });
    }

    /**
     * [grid description]
     * @return {[type]} [description]
     */
    protected function grid()
    {

        return Admin::grid($MODEL_NAME$::class, function (Grid $grid) {
            // 考虑是否需要scope和排序
            // $grid->model()->orderBy('listorder', 'asc');

            // // 添加按钮
            // if (!\Gate::check('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create')) {
            //     $grid->disableCreation();
            // }

            // // 编辑和删除按钮
            // $grid->actions(function ($actions) {
            //     // 编辑按钮
            //     if (!\Gate::check('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')) {
            //         $actions->disableEdit();
            //     }
            //     // 删除按钮
            //     if (!\Gate::check('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.destroy')) {
            //         $actions->disableDelete();
            //     }
            // });

            // // 导出按钮
            // if (!\Gate::check('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.export')) {
            //     $grid->disableExport();
            // }

            // // 批量操作
            // $grid->tools(function ($tools) {
            //     $tools->batch(function ($batch) {
            //         // 批量删除按钮
            //         if (!\Gate::check('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.batch_destroy')) {
            //             $batch->disableDelete();
            //         }
            //     });
            // });

            // 添加按钮
            if (Admin::user()->cannot('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create')) {
                $grid->disableCreation();
            }

            // 编辑和删除按钮
            $grid->actions(function ($actions) {
$DETAIL_BUTTON$
                // 编辑按钮
                if (Admin::user()->cannot('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')) {
                    $actions->disableEdit();
                }
                // 删除按钮
                if (Admin::user()->cannot('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.destroy')) {
                    $actions->disableDelete();
                }
$ROW_BUTTON$
            });

            // 导出按钮
            if (Admin::user()->cannot('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.export')) {
                $grid->disableExport();
            }

            // 批量操作
            $grid->tools(function ($tools) {
                $tools->batch(function ($batch) {
                    // 批量删除按钮
                    if (Admin::user()->cannot('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.batch_destroy')) {
                        $batch->disableDelete();
                    }
$BATCH_BELONG$
                });
$BATCH_EDIT_BUTTON$
            });

$LARAVELADMIN_COLUMN_LIST$
$IS_DISPLAY_PAGE_DETAIL$
$LARAVEL_ADMIN_TAGGING_GRID$

            /**
             * 过滤处理
             */
            $grid->filter(function ($filter) {
                // // 禁用id查询框
                // $filter->disableIdFilter();
$LARAVELADMIN_FILTER_FIELD_LIST$
            });
        });
    }

$DETAIL_TAB$
$DETAIL_TAB_GRID$
}
